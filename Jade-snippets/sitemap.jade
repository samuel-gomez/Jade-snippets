//- PLusieurs méthodes

//- Méthode 1 -------------------------------------------------

- var paths = [], files = []; function recursiveTree(obj) { if (typeof obj == "object" && !obj.length) { for (item in obj) { if (item === "contents") { recursiveTree(obj[item]); } else if (item != "data") { paths.push(item); recursiveTree(obj[item]); paths.splice(paths.length-1, 1); } } } else if (typeof obj == "object") { for (i in obj) { var file = obj[i]; if (/(\.html$)/.test(file)) { paths.push(file); files.push("/" + paths.join("/")); paths.splice(paths.length-1, 1); } } } }; recursiveTree(public);

xml
  urlset(xmlns="http://www.sitemaps.org/schemas/sitemap/0.9")
    - for(i in files) {
      url
        loc= files[i]
        priority 0.5
- }

//- Méthode 2 -------------------------------------------------

//- Appel dupuis un template
!= partial("_tree", { head: public, tail: "/" })

//- tree.jade

for val, key in head
  if key !== '.git' && key !== 'data'
    if key == 'contents'
      each file in val
        p= tail + file
    else
      != partial("_tree", { head: val, tail: tail + key + "/" })


//- Méthode 3 -------------------------------------------------

mixin tree(head, tail)
  for val, key in head
    if key !== '.git' && key !== 'data'
      if key == 'contents'
        each file in val
          p= tail + file
      else
        mixin tree(val, tail + key + "/")

h1 Sitemap
mixin tree(public, "/")